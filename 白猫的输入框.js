;(function (window, Scratch) {
  const ccwBase64 =
    ''

  const ccwCode = new TextDecoder('utf-8').decode(
    Uint8Array.from(atob(ccwBase64), v => v.charCodeAt(0))
  )
  const fn = URL.createObjectURL(
    new Blob(
      [
        `
var Scratch = document.getElementById('__ccw2tw_loader').scratchInstance
;(function (window) {

${ccwCode}

})(document.getElementById('__ccw2tw_loader').windowInstance)
`
      ],
      {
        type: 'text/javascript'
      }
    )
  )
  const windowProxy = new Proxy(window, {
    get(target, property) {
      if (property === 'Scratch') {
        return Scratch
      }
      const v = Reflect.get(target, property)
      if (typeof v === 'function') {
        return new Proxy(v, {
          apply(target, thisArg, argArray) {
            return Reflect.apply(
              target,
              thisArg === windowProxy ? window : thisArg,
              argArray
            )
          }
        })
      }
      return v
    },
    set(target, property, newValue) {
      if (property === 'tempExt') {
        if (
          typeof newValue === 'object' &&
          newValue !== null &&
          typeof newValue.Extension === 'function'
        ) {
          const runtimeProxy = new Proxy(Scratch.vm.runtime, {
            get(target, property) {
              if (property === 'getFormatMessage')
                return (...args) => {
                  Scratch.translate.setup(...args)
                  return Scratch.translate
                }
              return Reflect.get(target, property)
            },
            has(target, property) {
              if (property === 'getFormatMessage') return true
              return Reflect.has(target, property)
            }
          })
          const instance = Reflect.construct(newValue.Extension, [runtimeProxy])
          const _getInfo = instance.getInfo
          instance.getInfo = function () {
            const res = _getInfo.call(this)
            const blocks = res?.blocks
            if (typeof blocks === 'object' && blocks !== null) {
              for (const [key, value] of Object.entries(blocks)) {
                if (
                  typeof value === 'string' &&
                  value.startsWith('---') &&
                  value.length !== 3
                ) {
                  blocks[key] = {
                    blockType: Scratch.BlockType.LABEL,
                    text: value.substring(3)
                  }
                }
              }
            }
            return res
          }
          Scratch.extensions.register(instance)
        }
        return true
      }
      return Reflect.set(target, property, newValue)
    },
    has(target, property) {
      if (property === 'Scratch') return true
      if (property === 'tempExt') return false
      return Reflect.has(target, property)
    }
  })
  const script = document.createElement('script')
  const remove = () => {
    script.remove()
  }
  script.src = fn
  script.scratchInstance = Scratch
  script.windowInstance = windowProxy
  script.code = ccwCode
  script.type = 'text/javascript'
  script.id = '__ccw2tw_loader'
  script.addEventListener('load', remove)
  script.addEventListener('error', remove)
  document.head.appendChild(script)
})(window, Scratch)